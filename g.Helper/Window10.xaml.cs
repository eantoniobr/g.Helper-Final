using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace g.Helper
{
    /// <summary>
    /// Lógica interna para Window10.xaml
    /// </summary>
    public partial class Window10 : Window
    {
        public Window10()
        {
            InitializeComponent();
        }
        public string altura2 { get; set; }
        public string terreno2 { get; set; }
        public string angulo2 { get; set; }
        public string vento2 { get; set; }
        public string distancia2 { get; set; }
        public string quebra2 { get; set; }

        double[] forca = new double[] { 30.00, 30.28, 30.56, 30.83, 31.11, 31.39, 31.67, 31.94, 32.22, 32.50, 32.78, 33.06, 33.33, 33.61, 33.89, 34.17, 34.44, 34.72, 35.00, 35.28, 35.56, 35.83, 36.11, 36.39, 36.67, 36.94, 37.22, 37.50, 37.78, 38.06, 38.33, 38.61, 38.89, 39.17, 39.44, 39.72, 40.00, 40.28, 40.56, 40.83, 41.11, 41.39, 41.67, 41.94, 42.22, 42.50, 42.78, 43.06, 43.33, 43.61, 43.89, 44.17, 44.44, 44.72, 45.00, 45.28, 45.56, 45.83, 46.11, 46.39, 46.67, 46.94, 47.22, 47.50, 47.78, 48.06, 48.33, 48.61, 48.89, 49.17, 49.44, 49.72, 50.00, 50.28, 50.56, 50.83, 51.11, 51.39, 51.67, 51.94, 52.22, 52.50, 52.78, 53.06, 53.33, 53.61, 53.89, 54.17, 54.44, 54.72, 55.00, 55.28, 55.56, 55.83, 56.11, 56.39, 56.67, 56.94, 57.22, 57.50, 57.78, 58.06, 58.33, 58.61, 58.89, 59.17, 59.44, 59.72, 60.00, 60.28, 60.56, 60.83, 61.11, 61.39, 61.67, 61.94, 62.22, 62.50, 62.78, 63.06, 63.33, 63.61, 63.89, 64.17, 64.44, 64.72, 65.00, 65.28, 65.56, 65.83, 66.11, 66.39, 66.67, 66.94, 67.22, 67.50, 67.78, 68.06, 68.33, 68.61, 68.89, 69.17, 69.44, 69.72, 70.00, 70.28, 70.56, 70.83, 71.11, 71.39, 71.67, 71.94, 72.22, 72.50, 72.78, 73.06, 73.33, 73.61, 73.89, 74.17, 74.44, 74.72, 75.00, 75.28, 75.56, 75.83, 76.11, 76.39, 76.67, 76.94, 77.22, 77.50, 77.78, 78.06, 78.33, 78.61, 78.89, 79.17, 79.44, 79.72, 80.00, 80.28, 80.56, 80.83, 81.11, 81.39, 81.67, 81.94, 82.22, 82.50, 82.78, 83.06, 83.33, 83.61, 83.89, 84.17, 84.44, 84.72, 85.00, 85.28, 85.56, 85.83, 86.11, 86.39, 86.67, 86.94, 87.22, 87.50, 87.78, 88.06, 88.33, 88.61, 88.89, 89.17, 89.44, 89.72, 90.00, 90.28, 90.56, 90.83, 91.11, 91.39, 91.67, 91.94, 92.22, 92.50, 92.78, 93.06, 93.33, 93.61, 93.89, 94.17, 94.44, 94.72, 95.00, 95.28, 95.56, 95.83, 96.11, 96.39, 96.67, 96.94, 97.22, 97.50, 97.78, 98.06, 98.33, 98.61, 98.89, 99.17, 99.44, 99.72, 100.00 };
        string[] taco = new string[] { "84", "85", "86L", "86R", "87", "88", "89L", "89R", "90", "91", "92", "93L", "93R", "94", "95", "96L", "96R", "97", "98", "99", "100L", "100R", "101", "102", "103L", "103R", "104", "105", "106", "107L", "107R", "108", "109", "110L", "110R", "111", "112", "113", "114L", "114R", "115", "116", "117L", "117R", "118", "119", "120", "121L", "121R", "122", "123", "124L", "124R", "125", "126", "127", "128L", "128R", "129", "130", "131L", "131R", "132", "133", "134", "135L", "135R", "136", "137", "138L", "138R", "139", "140", "141", "142L", "142R", "143", "144", "145L", "145R", "146", "147", "148", "149L", "149R", "150", "151", "152L", "152R", "153", "154", "155", "156L", "156R", "157", "158", "159L", "159R", "160", "161", "162", "163L", "163R", "164", "165", "166L", "166R", "167", "168", "169", "170L", "170R", "171", "172", "173L", "173R", "174", "175", "176", "177L", "177R", "178", "179", "180L", "180R", "181", "182", "183", "184L", "184R", "185", "186", "187L", "187R", "188", "189", "190", "191L", "191R", "192", "193", "194L", "194R", "195", "196", "197", "198L", "198R", "199", "200", "201L", "201R", "202", "203", "204", "205L", "205R", "206", "207", "208L", "208R", "209", "210", "211", "212L", "212R", "213", "214", "215L", "215R", "216", "217", "218", "219L", "219R", "220", "221", "222L", "222R", "223", "224", "225", "226L", "226R", "227", "228", "229L", "229R", "230", "231", "232", "233L", "233R", "234", "235", "236L", "236R", "237", "238", "239", "240L", "240R", "241", "242", "243L", "243R", "244", "245", "246", "247L", "247R", "248", "249", "250L", "250R", "251", "252", "253", "254L", "254R", "255", "256", "257L", "257R", "258", "259", "260", "261L", "261R", "262", "263", "264L", "264R", "265", "266", "267", "268L", "268R", "269", "270", "271L", "271R", "272", "273", "274", "275L", "275R", "276", "277", "278L", "278R", "279", "280" };
        double E33 = 0, E34 = 0, O33 = 0, O34 = 0, N33 = 0, N34 = 0, N31 = 0, M29 = 0, M30 = 0, M31 = 0, N29 = 0, N30 = 0, G33 = 0, G34 = 0, F33 = 0, F34 = 0, F30 = 0, G30 = 0, F31 = 0, G31 = 0, G22 = 0, G21 = 0, G23 = 0, G24 = 0, J22 = 0, J24 = 0, J25 = 0, J26 = 0, J27 = 0, J29 = 0, J30 = 0, J33 = 0, J34 = 0, J2 = 0, J3 = 0, J1 = 0, B21 = 249.7, C21 = 215.7, D21 = 183.4, E21 = 153.7, B24 = 127.7, C24 = 104.5, D24 = 83.2, E24 = 63.8, B22 = 1.07, C22 = 0.703, D22 = 0.4849, E22 = 0.315, A24 = 263.4, A25 = 1.3, B25 = 0.25, K34 = 0, C25 = 0.175, K29 = 0, D25 = 0.116, E25 = 0.083, S22 = 1, S23 = 5, S24 = 10, S25 = 15, S26 = 20, S28 = -1, S29 = -10, S30 = -20, S31 = -30, S32 = -40, S33 = -50, T22 = 0.72, T23 = 0.722, T24 = 0.724, T25 = 0.738, T26 = 0.745, T28 = 0.682, T29 = 0.670, T30 = 0.660, T31 = 0.650, T32 = 0.640, T33 = 630, V23 = 100, V24 = 90, V25 = 80, V26 = 70, V27 = 60, V28 = 50, V29 = 40, V30 = 30, W23 = 263.4, W24 = 249.5, W25 = 215.6, N20 = 0, O20 = 0, G28 = 0, W26 = 183.4, W27 = 153.7, W28 = 127.3, W29 = 104.5, W30 = 63.8, X23 = 1.018, X24 = 0.703, X25 = 0.474, X26 = 0.315, X27 = 0.250, X28 = 0.175, X29 = 0.116, X30 = 0.083, X31 = 0.044, X32 = 0.035, X33 = 0, W31 = 50.9, W32 = 32.9, W33 = 0, V31 = 20, V32 = 10, V33 = 0, AA22 = 1, AA23 = 5, AA24 = 10, AA25 = 15, AA26 = 20, AA29 = -1, AA30 = -10, AA31 = -20, AA32 = -30, AA33 = -40, AA34 = -50, AB22 = 0.01366, AB23 = 0.01388, AB24 = 0.01408, AB25 = 0.01428, AB26 = 0.01448, AB29 = 0.01193, AB30 = 0.01180, AB31 = 0.01166, AB32 = 0.01167, AB33 = 0.01170, AB34 = 0.01190, M19 = 0, M20 = 0, M21 = 0, M22 = 0, M23 = 0, M24 = 0, M25 = 0, D31 = 0, D32 = 0, C32 = 0, C31 = 0, B32 = 0, B31 = 0, B30 = 0, C30 = 0, K33 = 0;

        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
                DragMove();
        }

        private void Window_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                Close();
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            double angulofloat = Convert.ToDouble(angulo2);
            double terrenofloat = 0, Q12 = 0;
            string penis2;
            double quebrafloat = Convert.ToDouble(quebra2);
            double M81 = Convert.ToDouble(distancia2);
            var penis = vento2.Substring(0, 1);
            double ventofloat = Convert.ToDouble(penis);
            double alturafloat = Convert.ToDouble(altura2);
            double AO2 = Math.Sin(angulofloat * 3.14 / 180);
            double AO1 = Math.Cos(angulofloat * 3.14 / 180);
            double AT1 = AO1;
            #region Terreno Dunk
            if (terreno2 != "100%")
            {
                penis2 = terreno2.Substring(0, 2);
                terrenofloat = Convert.ToDouble(penis2);
            }
            else
            {
                penis2 = terreno2.Substring(0, 3);
                terrenofloat = Convert.ToDouble(penis2);
            }
            if (terrenofloat == 100)
            {
                Q12 = M81 + 0;
            }
            else if (terrenofloat == 98)
            {
                Q12 = M81 + 1.5;
            }
            else if (terrenofloat == 97)
            {
                Q12 = M81 + 2.1;
            }
            else if (terrenofloat == 95)
            {
                Q12 = M81 + 3.7;
            }
            else if (terrenofloat == 92)
            {
                Q12 = M81 + 5.9;
            }
            else if (terrenofloat == 90)
            {
                Q12 = M81 + 7.5;
            }
            else if (terrenofloat == 85)
            {
                Q12 = M81 + 11.5;
            }
            else if (terrenofloat == 80)
            {
                Q12 = M81 + 16;
            }
            else if (terrenofloat == 75)
            {
                Q12 = M81 + 20.75;
            }
            else if (terrenofloat == 70)
            {
                Q12 = M81 + 24.75;
            }
            #endregion
            double S27 = alturafloat, S34 = alturafloat;
            double T27 = T22 * (S27 - S23) * (S27 - S24) * (S27 - S25) * (S27 - S26) / ((S22 - S23) * (S22 - S24) * (S22 - S25) * (S22 - S26)) + T23 * (S27 - S22) * (S27 - S24) * (S27 - S25) * (S27 - S26) / ((S23 - S22) * (S23 - S24) * (S23 - S25) * (S23 - S26)) + T24 * (S27 - S22) * (S27 - S23) * (S27 - S25) * (S27 - S26) / ((S24 - S22) * (S24 - S23) * (S24 - S25) * (S24 - S26)) + T25 * (S27 - S22) * (S27 - S23) * (S27 - S24) * (S27 - S26) / ((S25 - S22) * (S25 - S23) * (S25 - S24) * (S25 - S26)) + T26 * (S27 - S22) * (S27 - S23) * (S27 - S24) * (S27 - S25) / ((S26 - S22) * (S26 - S23) * (S26 - S24) * (S26 - S25));
            double T34 = T28 * (S34 - S29) * (S34 - S30) * (S34 - S31) * (S34 - S32) * (S34 - S33) / ((S28 - S29) * (S28 - S30) * (S28 - S31) * (S28 - S32) * (S28 - S33)) + T29 * (S34 - S28) * (S34 - S30) * (S34 - S31) * (S34 - S32) * (S34 - S33) / ((S29 - S28) * (S29 - S30) * (S29 - S31) * (S29 - S32) * (S29 - S33)) + T30 * (S34 - S28) * (S34 - S29) * (S34 - S31) * (S34 - S32) * (S34 - S33) / ((S30 - S28) * (S30 - S29) * (S30 - S31) * (S30 - S32) * (S30 - S33)) + T31 * (S34 - S28) * (S34 - S29) * (S34 - S30) * (S34 - S32) * (S34 - S33) / ((S31 - S28) * (S31 - S29) * (S31 - S30) * (S31 - S32) * (S31 - S33)) + T32 * (S34 - S28) * (S34 - S29) * (S34 - S30) * (S34 - S31) * (S34 - S33) / ((S32 - S28) * (S32 - S29) * (S32 - S30) * (S32 - S31) * (S32 - S33)) + T33 * (S34 - S28) * (S34 - S29) * (S34 - S30) * (S34 - S31) * (S34 - S32) / ((S33 - S28) * (S33 - S29) * (S33 - S30) * (S33 - S31) * (S33 - S32));
            double AA27 = alturafloat, AA35 = alturafloat;
            double AB27 = AB22 * (AA27 - AA23) * (AA27 - AA24) * (AA27 - AA25) * (AA27 - AA26) / ((AA22 - AA23) * (AA22 - AA24) * (AA22 - AA25) * (AA22 - AA26)) + AB23 * (AA27 - AA22) * (AA27 - AA24) * (AA27 - AA25) * (AA27 - AA26) / ((AA23 - AA22) * (AA23 - AA24) * (AA23 - AA25) * (AA23 - AA26)) + AB24 * (AA27 - AA22) * (AA27 - AA23) * (AA27 - AA25) * (AA27 - AA26) / ((AA24 - AA22) * (AA24 - AA23) * (AA24 - AA25) * (AA24 - AA26)) + AB25 * (AA27 - AA22) * (AA27 - AA23) * (AA27 - AA24) * (AA27 - AA26) / ((AA25 - AA22) * (AA25 - AA23) * (AA25 - AA24) * (AA25 - AA26)) + AB26 * (AA27 - AA22) * (AA27 - AA23) * (AA27 - AA24) * (AA27 - AA25) / ((AA26 - AA22) * (AA26 - AA23) * (AA26 - AA24) * (AA26 - AA25));
            double AB35 = AB29 * (AA35 - AA30) * (AA35 - AA31) * (AA35 - AA32) * (AA35 - AA33) * (AA35 - AA34) / ((AA29 - AA30) * (AA29 - AA31) * (AA29 - AA32) * (AA29 - AA33) * (AA29 - AA34)) + AB30 * (AA35 - AA29) * (AA35 - AA31) * (AA35 - AA32) * (AA35 - AA33) * (AA35 - AA34) / ((AA30 - AA29) * (AA30 - AA31) * (AA30 - AA32) * (AA30 - AA33) * (AA30 - AA34)) + AB31 * (AA35 - AA29) * (AA35 - AA30) * (AA35 - AA32) * (AA35 - AA33) * (AA35 - AA34) / ((AA31 - AA29) * (AA31 - AA30) * (AA31 - AA32) * (AA31 - AA33) * (AA31 - AA34)) + AB32 * (AA35 - AA29) * (AA35 - AA30) * (AA35 - AA31) * (AA35 - AA33) * (AA35 - AA34) / ((AA32 - AA29) * (AA32 - AA30) * (AA32 - AA31) * (AA32 - AA33) * (AA32 - AA34)) + AB33 * (AA35 - AA29) * (AA35 - AA30) * (AA35 - AA31) * (AA35 - AA32) * (AA35 - AA34) / ((AA33 - AA29) * (AA33 - AA30) * (AA33 - AA31) * (AA33 - AA32) * (AA33 - AA34)) + AB34 * (AA35 - AA29) * (AA35 - AA30) * (AA35 - AA31) * (AA35 - AA32) * (AA35 - AA33) / ((AA34 - AA29) * (AA34 - AA30) * (AA34 - AA31) * (AA34 - AA32) * (AA34 - AA33));
            double M26 = Q12;
            double K20 = B22 * (M26 - C21) * (M26 - D21) * (M26 - E21) * (M26 - B24) * (M26 - C24) * (M26 - D24) * (M26 - E24) / ((B21 - C21) * (B21 - D21) * (B21 - E21) * (B21 - B24) * (B21 - C24) * (B21 - D24) * (B21 - E24)) + C22 * (M26 - B21) * (M26 - D21) * (M26 - E21) * (M26 - B24) * (M26 - C24) * (M26 - D24) * (M26 - E24) / ((C21 - B21) * (C21 - D21) * (C21 - E21) * (C21 - B24) * (C21 - C24) * (C21 - D24) * (C21 - E24)) + D22 * (M26 - B21) * (M26 - C21) * (M26 - E21) * (M26 - B24) * (M26 - C24) * (M26 - D24) * (M26 - E24) / ((D21 - B21) * (D21 - C21) * (D21 - E21) * (D21 - B24) * (D21 - C24) * (D21 - D24) * (D21 - E24)) + E22 * (M26 - B21) * (M26 - C21) * (M26 - D21) * (M26 - B24) * (M26 - C24) * (M26 - D24) * (M26 - E24) / ((E21 - B21) * (E21 - C21) * (E21 - D21) * (E21 - B24) * (E21 - C24) * (E21 - D24) * (E21 - E24)) + B25 * (M26 - B21) * (M26 - C21) * (M26 - D21) * (M26 - E21) * (M26 - C24) * (M26 - D24) * (M26 - E24) / ((B24 - B21) * (B24 - C21) * (B24 - D21) * (B24 - E21) * (B24 - C24) * (B24 - D24) * (B24 - E24)) + C25 * (M26 - B21) * (M26 - C21) * (M26 - D21) * (M26 - E21) * (M26 - B24) * (M26 - D24) * (M26 - E24) / ((C24 - B21) * (C24 - C21) * (C24 - D21) * (C24 - E21) * (C24 - B24) * (C24 - D24) * (C24 - E24)) + D25 * (M26 - B21) * (M26 - C21) * (M26 - D21) * (M26 - E21) * (M26 - B24) * (M26 - C24) * (M26 - E24) / ((D24 - B21) * (D24 - C21) * (D24 - D21) * (D24 - E21) * (D24 - B24) * (D24 - C24) * (D24 - E24)) + E25 * (M26 - B21) * (M26 - C21) * (M26 - D21) * (M26 - E21) * (M26 - B24) * (M26 - C24) * (M26 - D24) / ((E24 - B21) * (E24 - C21) * (E24 - D21) * (E24 - E21) * (E24 - B24) * (E24 - C24) * (E24 - D24));
            double H33 = 0, H34 = 0, K22 = B22 * (M26 - C21) * (M26 - D21) / ((B21 - C21) * (B21 - D21)) + C22 * (M26 - B21) * (M26 - D21) / ((C21 - B21) * (C21 - D21)) + D22 * (M26 - B21) * (M26 - C21) / ((D21 - B21) * (D21 - C21));
            //SE(M26 < B21; K20; K22);
            if (M26 < B21)
            {
                M19 = K20;
            }
            else
            {
                M19 = K22;
            }
            //=SE(M26>(D21-0,0001);K22;K20)
            if (M26 > (D21 - 0.0001))
            {
                M20 = K22;
            }
            else
            {
                M20 = K20;
            }
            D31 = 1.1 * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W23 - W25) * (W23 - W27) * (W23 - W29) * (W23 - W31) * (W23 - W33)) + 0.9 * (M26 - W23) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W25 - W23) * (W25 - W27) * (W25 - W29) * (W25 - W31) * (W25 - W33)) + 0.842 * (M26 - W23) * (M26 - W25) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W27 - W23) * (W27 - W25) * (W27 - W29) * (W27 - W31) * (W27 - W33)) + 0.821 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W31) * (M26 - W33) / ((W29 - W23) * (W29 - W25) * (W29 - W27) * (W29 - W31) * (W29 - W33)) + 0.79 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W33) / ((W31 - W23) * (W31 - W25) * (W31 - W27) * (W31 - W29) * (W31 - W33)) + 0.76 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) / ((W33 - W23) * (W33 - W25) * (W33 - W27) * (W33 - W29) * (W33 - W31));
            D32 = 1.1 * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W23 - W25) * (W23 - W27) * (W23 - W29) * (W23 - W31) * (W23 - W33)) + 1 * (M26 - W23) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W25 - W23) * (W25 - W27) * (W25 - W29) * (W25 - W31) * (W25 - W33)) + 0.935 * (M26 - W23) * (M26 - W25) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W27 - W23) * (W27 - W25) * (W27 - W29) * (W27 - W31) * (W27 - W33)) + 0.8 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W31) * (M26 - W33) / ((W29 - W23) * (W29 - W25) * (W29 - W27) * (W29 - W31) * (W29 - W33)) + 0.7 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W33) / ((W31 - W23) * (W31 - W25) * (W31 - W27) * (W31 - W29) * (W31 - W33)) + 0.6 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) / ((W33 - W23) * (W33 - W25) * (W33 - W27) * (W33 - W29) * (W33 - W31));
            C31 = 1.04 * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W23 - W25) * (W23 - W27) * (W23 - W29) * (W23 - W31) * (W23 - W33)) + 0.916 * (M26 - W23) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W25 - W23) * (W25 - W27) * (W25 - W29) * (W25 - W31) * (W25 - W33)) + 0.915 * (M26 - W23) * (M26 - W25) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W27 - W23) * (W27 - W25) * (W27 - W29) * (W27 - W31) * (W27 - W33)) + 0.874 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W31) * (M26 - W33) / ((W29 - W23) * (W29 - W25) * (W29 - W27) * (W29 - W31) * (W29 - W33)) + 0.85 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W33) / ((W31 - W23) * (W31 - W25) * (W31 - W27) * (W31 - W29) * (W31 - W33)) + 0.82 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) / ((W33 - W23) * (W33 - W25) * (W33 - W27) * (W33 - W29) * (W33 - W31));
            C32 = 1 * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W23 - W25) * (W23 - W27) * (W23 - W29) * (W23 - W31) * (W23 - W33)) + 0.908 * (M26 - W23) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W25 - W23) * (W25 - W27) * (W25 - W29) * (W25 - W31) * (W25 - W33)) + 0.75 * (M26 - W23) * (M26 - W25) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W27 - W23) * (W27 - W25) * (W27 - W29) * (W27 - W31) * (W27 - W33)) + 0.7 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W31) * (M26 - W33) / ((W29 - W23) * (W29 - W25) * (W29 - W27) * (W29 - W31) * (W29 - W33)) + 0.64 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W33) / ((W31 - W23) * (W31 - W25) * (W31 - W27) * (W31 - W29) * (W31 - W33)) + 0.58 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) / ((W33 - W23) * (W33 - W25) * (W33 - W27) * (W33 - W29) * (W33 - W31));
            B31 = 1.2 * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W23 - W25) * (W23 - W27) * (W23 - W29) * (W23 - W31) * (W23 - W33)) + 0.908 * (M26 - W23) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W25 - W23) * (W25 - W27) * (W25 - W29) * (W25 - W31) * (W25 - W33)) + 0.837 * (M26 - W23) * (M26 - W25) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W27 - W23) * (W27 - W25) * (W27 - W29) * (W27 - W31) * (W27 - W33)) + 0.784 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W31) * (M26 - W33) / ((W29 - W23) * (W29 - W25) * (W29 - W27) * (W29 - W31) * (W29 - W33)) + 0.766 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W33) / ((W31 - W23) * (W31 - W25) * (W31 - W27) * (W31 - W29) * (W31 - W33)) + 0.74 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) / ((W33 - W23) * (W33 - W25) * (W33 - W27) * (W33 - W29) * (W33 - W31));
            B32 = 1 * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W23 - W25) * (W23 - W27) * (W23 - W29) * (W23 - W31) * (W23 - W33)) + 0.9 * (M26 - W23) * (M26 - W27) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W25 - W23) * (W25 - W27) * (W25 - W29) * (W25 - W31) * (W25 - W33)) + 0.797 * (M26 - W23) * (M26 - W25) * (M26 - W29) * (M26 - W31) * (M26 - W33) / ((W27 - W23) * (W27 - W25) * (W27 - W29) * (W27 - W31) * (W27 - W33)) + 0.705 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W31) * (M26 - W33) / ((W29 - W23) * (W29 - W25) * (W29 - W27) * (W29 - W31) * (W29 - W33)) + 0.6 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W33) / ((W31 - W23) * (W31 - W25) * (W31 - W27) * (W31 - W29) * (W31 - W33)) + 0.5 * (M26 - W23) * (M26 - W25) * (M26 - W27) * (M26 - W29) * (M26 - W31) / ((W33 - W23) * (W33 - W25) * (W33 - W27) * (W33 - W29) * (W33 - W31));
            C30 = C31 * 0.974;
            //=SE(M26>205;B31*1,023;B31)
            if (M26 > 205)
            {
                B30 = B31 * 1.023;
            }
            else
            {
                B30 = B31;
            }
            #region INF...
            double B1 = 249.7, C1 = 215.7, D1 = 183.4, E1 = 153.7, F1 = 127.7, G1 = 104.5, H1 = 83.2, I1 = 63.8, B2 = 2.8, C2 = 2.3, D2 = 1.8, E2 = 1.5, F2 = 1.4, G2 = 1.3, H2 = 1.1, I2 = 0.9, B3 = 3.6, C3 = 4, D3 = 3.6, E3 = 2.3, F3 = 2.1, G3 = 2, H3 = 1.9, I3 = 1.8;
            K29 = M26 + G28;
            J2 = K29;
            J3 = B3 * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((B1 - C1) * (B1 - D1) * (B1 - E1) * (B1 - F1) * (B1 - G1) * (B1 - H1) * (B1 - I1)) + C3 * (J2 - B1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((C1 - B1) * (C1 - D1) * (C1 - E1) * (C1 - F1) * (C1 - G1) * (C1 - H1) * (C1 - I1)) + D3 * (J2 - B1) * (J2 - C1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((D1 - B1) * (D1 - C1) * (D1 - E1) * (D1 - F1) * (D1 - G1) * (D1 - H1) * (D1 - I1)) + E3 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - F1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((E1 - B1) * (E1 - C1) * (E1 - D1) * (E1 - F1) * (E1 - G1) * (E1 - H1) * (E1 - I1)) + F3 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((F1 - B1) * (F1 - C1) * (F1 - D1) * (F1 - E1) * (F1 - G1) * (F1 - H1) * (F1 - I1)) + G3 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - H1) * (J2 - I1) / ((G1 - B1) * (G1 - C1) * (G1 - D1) * (G1 - E1) * (G1 - F1) * (G1 - H1) * (G1 - I1)) + H3 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - I1) / ((H1 - B1) * (H1 - C1) * (H1 - D1) * (H1 - E1) * (H1 - F1) * (H1 - G1) * (H1 - I1)) + I3 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - H1) / ((I1 - B1) * (I1 - C1) * (I1 - D1) * (I1 - E1) * (I1 - F1) * (I1 - G1) * (I1 - H1));
            J1 = B2 * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((B1 - C1) * (B1 - D1) * (B1 - E1) * (B1 - F1) * (B1 - G1) * (B1 - H1) * (B1 - I1)) + C2 * (J2 - B1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((C1 - B1) * (C1 - D1) * (C1 - E1) * (C1 - F1) * (C1 - G1) * (C1 - H1) * (C1 - I1)) + D2 * (J2 - B1) * (J2 - C1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((D1 - B1) * (D1 - C1) * (D1 - E1) * (D1 - F1) * (D1 - G1) * (D1 - H1) * (D1 - I1)) + E2 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - F1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((E1 - B1) * (E1 - C1) * (E1 - D1) * (E1 - F1) * (E1 - G1) * (E1 - H1) * (E1 - I1)) + F2 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - G1) * (J2 - H1) * (J2 - I1) / ((F1 - B1) * (F1 - C1) * (F1 - D1) * (F1 - E1) * (F1 - G1) * (F1 - H1) * (F1 - I1)) + G2 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - H1) * (J2 - I1) / ((G1 - B1) * (G1 - C1) * (G1 - D1) * (G1 - E1) * (G1 - F1) * (G1 - H1) * (G1 - I1)) + H2 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - I1) / ((H1 - B1) * (H1 - C1) * (H1 - D1) * (H1 - E1) * (H1 - F1) * (H1 - G1) * (H1 - I1)) + I2 * (J2 - B1) * (J2 - C1) * (J2 - D1) * (J2 - E1) * (J2 - F1) * (J2 - G1) * (J2 - H1) / ((I1 - B1) * (I1 - C1) * (I1 - D1) * (I1 - E1) * (I1 - F1) * (I1 - G1) * (I1 - H1));
            #endregion
            //SE(E(Calculadora!B2>16,89;Calculadora!B2<30);(C31*1,008)*AB27))))))
            if (alturafloat > -0.9 && alturafloat < 6)
            {
                K33 = B30 * AB27;
            }
            else if (alturafloat > 5.99 && alturafloat < 8.4)
            {
                K33 = D31 * AB27;
            }
            else if (alturafloat > 8.39 && alturafloat < 10)
            {
                K33 = AB27 * B30;
            }
            else if (alturafloat > 9.99 && alturafloat < 14.5)
            {
                K33 = C30 * AB27;
            }
            else if (alturafloat > 14.49 && alturafloat < 16.9)
            {
                K33 = C31 * AB27;
            }
            else if (alturafloat > 16.89 && alturafloat < 30)
            {
                K33 = (C31 * 1.008) * AB27;
            }
            K34 = AB35 * D32;
            //=T27*POTÊNCIA((1+(K33));B21-M26)
            M21 = T27 * Math.Pow((1 + K33), B21 - M26);
            N20 = B22 * (M26 - C21) * (M26 - D21) / ((B21 - C21) * (B21 - D21)) + C22 * (M26 - B21) * (M26 - D21) / ((C21 - B21) * (C21 - D21)) + D22 * (M26 - B21) * (M26 - C21) / ((D21 - B21) * (D21 - C21));
            O20 = A25 * (M26 - B21) * (M26 - C21) / ((A24 - B21) * (A24 - C21)) + B22 * (M26 - A24) * (M26 - C21) / ((B21 - A24) * (B21 - C21)) + C22 * (M26 - A24) * (M26 - B21) / ((C21 - A24) * (C21 - B21));
            M22 = T34 * Math.Pow(1 + (K34), (B21 - M26));
            //=SE(Calculadora!$B$2>0;Calculadora!$B$2*M21;Calculadora!$B$2*M22)
            if (alturafloat > 0)
            {
                G28 = alturafloat * M21;
            }
            else
            {
                G28 = alturafloat * M22;
            }
            J33 = J1;
            J34 = J3;
            //=SE((M26>0);((100+(G28/-J33))/100))
            if (M26 > 0)
            {
                M23 = ((100 + (G28 / -J33)) / 100);
            }
            if (M26 > 0)
            {
                M24 = ((100 + (G28 / -J34)) / 100);
            }
            M25 = M20 / 4 * quebrafloat;
            J22 = M20 * ventofloat * AO1;
            J24 = AT1 * ventofloat * M20 * 1 * (1 - (G28 * 0.016));
            J25 = AT1 * ventofloat * M20 * 1.24 * (1 - (G28 * 0.016));
            J26 = (100 + (J24 * 2.75 / -4)) / 100;
            J27 = (100 + (J25 * 4 / -6.25)) / 100;
            J29 = M26 + G28 - J24;
            J30 = M26 + G28 + J25;
            G21 = M20 * AO2 * ventofloat;
            //=SE(G28>0;G21*M23;G21*M24)
            if (G28 > 0)
            {
                G22 = G21 * M23;
            }
            else
            {
                G22 = G21 * M24;
            }
            G23 = G22 * J26;
            G24 = G22 / J27;
            G30 = 100 * (J29 - C21) * (J29 - D21) * (J29 - E21) * (J29 - B24) * (J29 - C24) * (J29 - D24) * (J29 - E24) / ((B21 - C21) * (B21 - D21) * (B21 - E21) * (B21 - B24) * (B21 - C24) * (B21 - D24) * (B21 - E24)) + 90 * (J29 - B21) * (J29 - D21) * (J29 - E21) * (J29 - B24) * (J29 - C24) * (J29 - D24) * (J29 - E24) / ((C21 - B21) * (C21 - D21) * (C21 - E21) * (C21 - B24) * (C21 - C24) * (C21 - D24) * (C21 - E24)) + 80 * (J29 - B21) * (J29 - C21) * (J29 - E21) * (J29 - B24) * (J29 - C24) * (J29 - D24) * (J29 - E24) / ((D21 - B21) * (D21 - C21) * (D21 - E21) * (D21 - B24) * (D21 - C24) * (D21 - D24) * (D21 - E24)) + 70 * (J29 - B21) * (J29 - C21) * (J29 - D21) * (J29 - B24) * (J29 - C24) * (J29 - D24) * (J29 - E24) / ((E21 - B21) * (E21 - C21) * (E21 - D21) * (E21 - B24) * (E21 - C24) * (E21 - D24) * (E21 - E24)) + 60 * (J29 - B21) * (J29 - C21) * (J29 - D21) * (J29 - E21) * (J29 - C24) * (J29 - D24) * (J29 - E24) / ((B24 - B21) * (B24 - C21) * (B24 - D21) * (B24 - E21) * (B24 - C24) * (B24 - D24) * (B24 - E24)) + 50 * (J29 - B21) * (J29 - C21) * (J29 - D21) * (J29 - E21) * (J29 - B24) * (J29 - D24) * (J29 - E24) / ((C24 - B21) * (C24 - C21) * (C24 - D21) * (C24 - E21) * (C24 - B24) * (C24 - D24) * (C24 - E24)) + 40 * (J29 - B21) * (J29 - C21) * (J29 - D21) * (J29 - E21) * (J29 - B24) * (J29 - C24) * (J29 - E24) / ((D24 - B21) * (D24 - C21) * (D24 - D21) * (D24 - E21) * (D24 - B24) * (D24 - C24) * (D24 - E24)) + 30 * (J29 - B21) * (J29 - C21) * (J29 - D21) * (J29 - E21) * (J29 - B24) * (J29 - C24) * (J29 - D24) / ((E24 - B21) * (E24 - C21) * (E24 - D21) * (E24 - E21) * (E24 - B24) * (E24 - C24) * (E24 - D24));
            G31 = 100 * (J30 - C21) * (J30 - D21) * (J30 - E21) * (J30 - B24) * (J30 - C24) * (J30 - D24) * (J30 - E24) / ((B21 - C21) * (B21 - D21) * (B21 - E21) * (B21 - B24) * (B21 - C24) * (B21 - D24) * (B21 - E24)) + 90 * (J30 - B21) * (J30 - D21) * (J30 - E21) * (J30 - B24) * (J30 - C24) * (J30 - D24) * (J30 - E24) / ((C21 - B21) * (C21 - D21) * (C21 - E21) * (C21 - B24) * (C21 - C24) * (C21 - D24) * (C21 - E24)) + 80 * (J30 - B21) * (J30 - C21) * (J30 - E21) * (J30 - B24) * (J30 - C24) * (J30 - D24) * (J30 - E24) / ((D21 - B21) * (D21 - C21) * (D21 - E21) * (D21 - B24) * (D21 - C24) * (D21 - D24) * (D21 - E24)) + 70 * (J30 - B21) * (J30 - C21) * (J30 - D21) * (J30 - B24) * (J30 - C24) * (J30 - D24) * (J30 - E24) / ((E21 - B21) * (E21 - C21) * (E21 - D21) * (E21 - B24) * (E21 - C24) * (E21 - D24) * (E21 - E24)) + 60 * (J30 - B21) * (J30 - C21) * (J30 - D21) * (J30 - E21) * (J30 - C24) * (J30 - D24) * (J30 - E24) / ((B24 - B21) * (B24 - C21) * (B24 - D21) * (B24 - E21) * (B24 - C24) * (B24 - D24) * (B24 - E24)) + 50 * (J30 - B21) * (J30 - C21) * (J30 - D21) * (J30 - E21) * (J30 - B24) * (J30 - D24) * (J30 - E24) / ((C24 - B21) * (C24 - C21) * (C24 - D21) * (C24 - E21) * (C24 - B24) * (C24 - D24) * (C24 - E24)) + 40 * (J30 - B21) * (J30 - C21) * (J30 - D21) * (J30 - E21) * (J30 - B24) * (J30 - C24) * (J30 - E24) / ((D24 - B21) * (D24 - C21) * (D24 - D21) * (D24 - E21) * (D24 - B24) * (D24 - C24) * (D24 - E24)) + 30 * (J30 - B21) * (J30 - C21) * (J30 - D21) * (J30 - E21) * (J30 - B24) * (J30 - C24) * (J30 - D24) / ((E24 - B21) * (E24 - C21) * (E24 - D21) * (E24 - E21) * (E24 - B24) * (E24 - C24) * (E24 - D24));
            F30 = 100 * (J29 - C21) * (J29 - D21) * (J29 - E21) / ((B21 - C21) * (B21 - D21) * (B21 - E21)) + 90 * (J29 - B21) * (J29 - D21) * (J29 - E21) / ((C21 - B21) * (C21 - D21) * (C21 - E21)) + 80 * (J29 - B21) * (J29 - C21) * (J29 - E21) / ((D21 - B21) * (D21 - C21) * (D21 - E21)) + 70 * (J29 - B21) * (J29 - C21) * (J29 - D21) / ((E21 - B21) * (E21 - C21) * (E21 - D21));
            F31 = 100 * (J30 - C21) * (J30 - D21) * (J30 - E21) / ((B21 - C21) * (B21 - D21) * (B21 - E21)) + 90 * (J30 - B21) * (J30 - D21) * (J30 - E21) / ((C21 - B21) * (C21 - D21) * (C21 - E21)) + 80 * (J30 - B21) * (J30 - C21) * (J30 - E21) / ((D21 - B21) * (D21 - C21) * (D21 - E21)) + 70 * (J30 - B21) * (J30 - C21) * (J30 - D21) / ((E21 - B21) * (E21 - C21) * (E21 - D21));
            G33 = G23 + M25; //Desvio Front
            G34 = G24 + M25; //Desvio Back
            //=SE(M26>(E21-0,0001);F30;G30)
            if (M26 > E21 - 0.0001)
            {
                F33 = F30; //% Forca Front
            }
            else
            {
                F33 = G30; //% Forca Front
            }
            //= SE(M26 > (E21 - 0, 0001); F31; G31)
            if (M26 > E21 - 0.0001)
            {
                F34 = F31; //% Forca Back
            }
            else
            {
                F34 = G31; //% Forca Back
            }
            #region Calculo Spin
            N29 = F34 % 0.27777777777;
            M29 = F33 % 0.27777777777;
            N30 = N29 / 0.27777777777;
            M30 = M29 / 0.27777777777;
            //= SE(N30 < 0, 288; ARREDONDAR.PARA.BAIXO(N30; 0); ARREDONDAR.PARA.CIMA(N30; 0))
            if (N30 < 0.288)
            {
                N31 = Math.Floor(N30);
            }
            else
            {
                N31 = Math.Ceiling(N30);
            }
            if (M30 < 0.288)
            {
                M31 = Math.Floor(M30);
            }
            else
            {
                M31 = Math.Ceiling(M30);
            }
            //=SE(N29>(20/72)-0,08;9;8)
            if (N29 > 0.27777777777 - 0.08)
            {
                O34 = 9;
            }
            else
            {
                O34 = 8;
            }
            //= SE(M29 > (20 / 72) - 0, 08; 9; 8)
            if (M29 > 0.27777777777 - 0.08)
            {
                N34 = 9;
            }
            else
            {
                N34 = 8;
            }
            //=SE(N29<0,08;9;O34)
            if (N29 < 0.08)
            {
                O33 = 9;
            }
            else
            {
                O33 = O34;
            }
            if (M29 < 0.08)
            {
                N33 = 9;
            }
            else
            {
                N33 = N34;
            }
            #endregion
            H33 = N33;
            H34 = O33;

            double numeroBase = F34;
            double numeroDaArray = forca.Aggregate((x, y) => Math.Abs(x - numeroBase) < Math.Abs(y - numeroBase) ? x : y);
            int indice = Array.IndexOf(forca, numeroDaArray);

            double numeroBase2 = F33;
            double numeroDaArray2 = forca.Aggregate((x, y) => Math.Abs(x - numeroBase2) < Math.Abs(y - numeroBase2) ? x : y);
            int indice2 = Array.IndexOf(forca, numeroDaArray2);

            string forcafront = taco[indice];
            string forcaback = taco[indice2];

            forcaback2.Text = forcafront;
            forcafront2.Text = forcaback;
            G33 = G33 / 0.2165; //Desvio Front PB
            G34 = G34 / 0.2165; //Desvio Back PB
            G33 = Math.Round(G33, 2); //front
            G34 = Math.Round(G34, 2); //back
            F33 = Math.Round(F33, 2); //front
            F34 = Math.Round(F34, 2); //back
            ffpercent.Text = Convert.ToString(F33 + "%");
            fbpercent.Text = Convert.ToString(F34 + "%");
            pbfront2.Text = Convert.ToString(G33);
            pbback2.Text = Convert.ToString(G34);
            spinfront2.Text = Convert.ToString(H33); //H33
            spinback2.Text = Convert.ToString(H34); //H34
            Close();
        }
    }
}
